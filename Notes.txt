              ## Variables ##

* Remember variables names can contain only letter, numbers and underscores. Don't start with a number.

* Don't have any space in your variable names, however, you can use underscore in your variable names.

* Don't use python keywords and function names as your variable names.

* Keep them clear and descriptive as much as possible.

* A name error usually means  we either forgot to set a variable's value before using it, or we made a spelling mistake when entering the variable's name.

# The best way to understand new programming concepts is to try using them in your programs.

             ## Strings ##

* Strings are simply a series of characters. Anything inside quotes is considered a string in python and you can use single or double quotes around your strings.

* You can Concatenate two string values together. To do that you can use '+' to combine things.

* You can use concatenation to compose a message and then store the entire message in a variable.

            ## Methods ##
* A method is an action that python can perform on a piece of data.

* Every method is followed by a set of parentheses, because methods often needs additional information to do their work. That additional information is usually provided inside that parenthesis.

Concatenating = The action of putting linking or putting two things together.

* To add a little bit of indentation in your text you can include "\t" in your message and it'll add a little bit of gap in your text.

* To add a new line in your text you can do so by adding \n in your text.

* To ensure that no whitespace exists at the right end of a string, use the rstrip() method to get rid of space in the right side. Then you can do lstrip() to get rid of extra space from the left side. You can call the strip() method at the end to get rid of extra space from both sides in your string values.

* if you have to use an apostrophe inside your string, make sure to use "" as the opening and closing of your string or else you'll confuse python and it won't know when the string is starting or ending.

            ## Numbers in python ##
* Python treats numbers in several different ways, depending on how they are being used.

* Python calls any number with a decimal point a float.

* When you use integar within strings, you need to specify explicitly that you want python to use the integar as a string of characters. You can do this by wrapping the variable in the str() function, which tells python to represent non-string values as strings.

           ## Index position ##
* Index position starts at 0.
* Python has a special syntax for accessing the last element in a list. By asking for the item at index '-1'
* When you append an item to the list it it usually added at the end of the list.

* To put your users in control, start by defining an empty list that will hold the users’ values. Then append each new value provided to the list you just created.

* You can a new element at any position in your list using the insert() method. You do this by specifying the index of the new element and the value of the new item.

* You can remove an item from a list. To do so you are going to have to use the remove method to do that. You can remove an item according to it's position in the list or according to it's value.for ex: del [your variable name][the position of what you want to remove]

* You can remove an item from any position in a list using the del statement if you know its index.

* The pop() method removes the last item in a list, but it lets you word with that item after removing it.

* Remember that each time you use pop(), the item you word with is no longer stored in the list.

* Remember: When you want to delete an item from a list and not use that item in any way, use the del statement; if you want to use an item as you remove it, use the pop() method.

                  ## For loops ##

* When choosing a variable name for a for loop, use a meaningful name that represents a single item from the list. Using a singular and plural names can help you identify whether a section of code is working with a single element from the list of the entire list.

* You can have just about anything inside a for loop! Every indented line after the 'for cat in Cats' is considered inside the loop, each indented line is executed once for each value in the list. using that you can do as much work as you like with each value in the list.

* If you don't want anything to be inside the for loop don't indent it! Keep it outside the for loop so it doesn't repeat for each item in the list.

* The colon at the end of a for statement tells python to interpret the next line as the start of the loop

                  ## Indentation error ##

 * Python uses indentation to determine when one line of code is connected to the line above it.

 *The only lines that you should indent are the actions you want to repeat for each item in a for loop.

 * If an action is repeated many times when it should be executed only once, determine whether you just need to unindent the code for that action.

                     # Making a Numerical List #
* python's range( function makes it easy to generate a series of numbers. you can use range( function to print a series of numbers))

* The output of range will never contain the last number of the range.

               ## Simple Statistic with a list of NUmbers#

* if you want to find the min number in a list use "min()"
if you want to find the max number in the list use this max()
if you want to get the sum of the numbers in your list use this sum()

                               # Slicing a list #
* To slice an a list you need to tell the program what are the objects you want from that list! Kind of like the range where you can tell that you want the value from one point to the other!

* When you print the slice it prints the values starting with the first number provided and ends with the last value. It includes the both of them when it prints out the list.

                    ## Tuples
* With tuplese you can create a list that cannot be changed like a normal list. Another words Tuple lists are immuatable. An immuatable list is called a tuple.

* When compared with lists, tuples are simple data structures. Use them when you want to store a set of values that should not be changed through- out the life of a program.

                  ## If statement##
* Python's if statement allows you to examine the current state of a program and respond appropriately to that state.

* When you want to determine whether two values are not equal, you can combine an exclamation point and an equal sign (!=). The '!'

* Most of the conditional expressions you write will test for equality, but sometimes you'll find it more efficient to test for inequality.

* You can include various mathematical comparisons in your conditional statements as well, such as less than, less than or equal to, greater than, and greater than or equal to.

* Each mathematical comparison can be used as part of an if statement, which can help you detect the exact conditions of interest.

* You can use "and" "or" to check two different conditions at once.

*To find out whether a particular value is already in a list use the key word "in".

* The simple kind of if statement has one test and one action.

* In summery, if you want only one block of code to run, use an if-elif-else chain. If more than one block of code needs to run, use a series of independent if statements.


                                        ## Boolean Expression##

* A Boolean expression is just Another name for a conditional test.

* Boolean values provides an efficient way to track the state of a program or a particular condition that is important in your program.

                                    ## Ordinal numbers ##
* Ordinal number includes their position in a list, such as 1st or 2nd. Most ordinal end in the, except 1,2 and 3.

                                            ## Dictionary ##
* A Dictionary in Python is a collection of Key-Value_pairs. Each Key is connected to a value and you can use the key to access the value associated with that key.

* In Dictionary the order doesn't matter. You can store them in whichever way you want to store them. Python doesn’t care about the order in which you store each key-value pair; it cares only about the connection between each key and its value.

* Typically, you’ll use empty dictionaries when storing user-supplied data in a dictionary or when you write code that generates a large number of key-value pairs automatically.


                                    ## Removing Key-Value Pairs ##
* When you no longer need a piece of information that's stored in a dictionary, you can use the del statement to completely remove a key-value pair.


                                                # Function #
* When you want to perform a particular task that you have defined in a function, you call the name of the function responsible for it.

* IF you need to perform that tasks multiple times throughout you don't need to type all the code for the same task again and again.

* An argument is a piece of information that is passed from a function call to a function.

* You can call a function as many times as you want!

* When you use default values, any parameter with default values needs to be listed after all the parameters that don't have default values. This allows python to continue interpreting Positional arguments correctly.

* Unmatched argument happens when you provide fewer or more arguments than a function needs to do it's work!

* This example also demonstrates the idea that every function should have one specific job.

* If you are writing a function and notice the function is doing too many different tasks, try to split the code into two or more functions.

* If you want your function to accept several different kinds of arguments, the paramater that accepts an arbitrary number of arguments must be placed last in the function definition. 
